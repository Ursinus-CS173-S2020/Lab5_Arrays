import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 *
 * @author ctralie
 */
public class Lab5Test {

    @Test
    /**
    * As an example, take the weights from our class
    * for programming assignments, labs, final project, 
    * class participation, reading surveys, debugging table
    */
    public void testGetWeightedAverage1() {
        double[] weights = {45.0, 25.0, 15.0, 5.0, 5.0, 5.0};
        double[] values = {100, 60, 98, 50, 20, 100};
        double expResult = 83.2;
        double result = Lab5.getWeightedAverage(weights, values);
        assertEquals(expResult, result, 0.001);
    }
    
    /**
     * Same as the above, except we pretend all of the
     * weights are the same
     */
    @Test
    public void testGetWeightedAverage2() {
        double[] weights = {1, 1, 1, 1, 1, 1};
        double[] values = {100, 60, 98, 50, 20, 100};
        double expResult = 71.3;
        double result = Lab5.getWeightedAverage(weights, values);
        assertEquals(expResult, result, 0.1);
    }    
    
    @Test
    public void testGetWeightedAverage3() {
        double[] weights = {1, 2, 3, 4};
        double[] values = {10, 7, 6, 2};
        double expResult = 5.0;
        double result = Lab5.getWeightedAverage(weights, values);
        assertEquals(expResult, result, 0.1);
    }    
    
    @Test
    public void testGetWeightedAverage4() {
        double[] weights = {100, 1, 1, 1, 1};
        double[] values = {1, 100, 100, 100, 100};
        double expResult = 4.81;
        double result = Lab5.getWeightedAverage(weights, values);
        assertEquals(expResult, result, 0.1);
    }   
    
    @Test
    public void testGetWeightedAverage5() {
        double[] weights = {0.31552127, 0.8647254 , 0.87035814, 0.60727332, 0.06897316,
       0.30159539, 0.26973183, 0.67753935, 0.52183618, 0.68656571,
       0.83665323, 0.23606499, 0.06512624, 0.91784412, 0.36294697,
       0.59811577, 0.10261434, 0.09856663, 0.24775475, 0.92427948,
       0.81003547, 0.89807626, 0.25375245, 0.32222577, 0.32400421,
       0.34682318, 0.39856517, 0.37469085, 0.73443748, 0.1007878 ,
       0.78568188, 0.82287767, 0.27912518, 0.41844004, 0.42497099,
       0.57901996, 0.63677671, 0.03609615, 0.2185159 , 0.04484415,
       0.89667829, 0.53985733, 0.80292881, 0.70030258, 0.51304185,
       0.53327664, 0.07063883, 0.76278454, 0.45385045, 0.66704566,
       0.47481655, 0.46531393, 0.82828372, 0.06433528, 0.29119271,
       0.81864778, 0.02560528, 0.61323446, 0.89192236, 0.37956085,
       0.45957977, 0.18206518, 0.30508467, 0.88049003, 0.43099426,
       0.90937624, 0.26369817, 0.76396191, 0.23261291, 0.95688445,
       0.18764554, 0.982995  , 0.89410931, 0.85179476, 0.63997249,
       0.01287878, 0.76931087, 0.79111693, 0.8281292 , 0.72684383,
       0.18851124, 0.43439039, 0.15764412, 0.87381022, 0.62825939,
       0.3038366 , 0.14807251, 0.12317353, 0.49033858, 0.57612923,
       0.15426548, 0.1519144 , 0.11325544, 0.2322533 , 0.70805165,
       0.69795049, 0.9668564 , 0.42676789, 0.55435326, 0.28889123};
        double[] values = {-1.27935423e+00, -9.13730337e-05,  4.41916573e-02,  6.72638961e-01,
       -2.75242528e-01,  4.13519115e-01,  4.69458919e-01,  1.51218070e+00,
       -1.55693213e-01, -3.94666581e-01, -2.12465051e+00, -1.25375588e+00,
       -5.32291757e-01, -7.75517510e-01,  5.75524720e-01, -2.58541749e+00,
        1.77080924e+00,  3.86891928e-01, -1.09665434e+00, -1.11862487e+00,
       -4.90630568e-01,  8.08921010e-02,  8.24200407e-01, -7.35661122e-01,
       -1.18978630e+00, -1.62363808e+00, -3.94995920e-01,  1.57191831e+00,
       -7.86869534e-01, -3.01464516e-01,  5.32196974e-02,  1.00144605e+00,
       -1.40171317e+00, -1.45565059e+00, -8.73091722e-01,  1.01037991e+00,
        1.19205585e+00,  7.90904287e-01,  2.29895017e+00,  1.30163063e+00,
       -8.16078118e-02, -7.56869509e-01, -3.92085915e-01,  1.83904633e+00,
        5.15998761e-01,  8.37237319e-01,  1.34305289e-01, -1.07209067e+00,
        1.46936139e-02, -1.22081031e+00, -5.29785489e-01, -3.10250319e-01,
        1.24443303e+00, -2.09136087e-01,  1.64161933e+00, -6.80435214e-01,
        1.31742719e+00,  1.58794045e+00,  4.21341175e-01, -1.29973027e+00,
       -2.29290497e-01, -2.26614123e-01,  7.46935762e-02,  5.36786693e-01,
        5.06529938e-01,  3.98358138e-01, -9.78769526e-01,  1.01456627e+00,
       -7.91316430e-01, -5.56960749e-01, -8.47545989e-01, -2.81028127e-01,
       -2.08583662e+00, -4.38760289e-02,  7.07670215e-02, -1.67551030e+00,
        1.39658682e+00, -1.14757636e-02,  1.23947370e+00, -5.28648344e-01,
        6.54706073e-01, -1.04619823e+00, -1.51288305e+00,  8.87978173e-01,
        1.23711677e+00,  2.73831708e-01,  1.36977497e+00, -1.03589656e+00,
       -1.90165658e-01, -1.46433960e+00,  1.85353156e-01, -7.42937972e-01,
       -1.43959244e-01,  8.56477783e-01,  6.73959890e-01, -1.81581229e+00,
       -4.91178266e-01,  2.22927480e+00, -3.66925337e-02, -5.64627856e-02};
        double expResult = -0.06571338686292948;
        double result = Lab5.getWeightedAverage(weights, values);
        assertEquals(expResult, result, 0.0001);
    }   
    
    @Test
    public void testGetWeightedAverageCornerCase() {
        double[] weights = {};
        double[] values = {};
        double expResult = 0.0;
        double result = Lab5.getWeightedAverage(weights, values);
        assertEquals(expResult, result, 0.0);
    }    
    
    @Test
    public void testMinIndex1() {
        double[] arr = {-1, 5, 8, -9, 0, 2};
        int expResult = 3;
        int result = Lab5.getMinIndex(arr);
        assertEquals(expResult, result);
    }    
    
    @Test
    public void testMinIndex2() {
        double[] arr = {71, 67, 87, 36, 91, 48, 83, 79, 57, 67,  4, 66, 46, 37, 34, 48, 80,
       96, 39, 49, 94, 73, 45, 15, 35, 87, 42, 26, 21, 59, 64, 67, 70,  7,
       47, 72, 94, 32,  3, 36, 87,  2,  0, 19, 19, 19, 30, 11, 79, 11};
        int expResult = 42;
        int result = Lab5.getMinIndex(arr);
        assertEquals(expResult, result);
    }    
    
    @Test
    public void testMinIndex3() {
        double[] arr = {58, -903,   90, -615, -907, -525, -332,   80, -326, -995,  129,
       -380,  137, -336, -836,   68,  140, -197, -107, -719,    8, -158,
       -392, -330, -952,  -82, -954, -349,   53, -370, -121, -321,  -37,
       -101,  -30,  -27, -534, -669, -853, -786,  139, -707,   74, -255,
       -839, -911,   18,    9, -122, -225, -862, -260, -662, -811, -223,
       -212, -233, -706, -515,  112,   76, -662, -801, -169, -221,  185,
       -878, -816, -931,   24, -211, -505,  106, -599, -336, -242,   14,
        -22,  160, -435, -584, -749, -721, -621, -219, -214, -522, -725,
       -683,   28, -637,   -6,  -57, -583, -288, -211, -339, -872, -913,
       -801, -509,  103, -351, -898, -891, -710, -320,  -71, -264,  -19,
       -369, -310,   95,   64, -898, -284, -334, -564,  -34,   47, -625,
       -266,   77,  -44,  110, -471,  175, -327, -643, -282, -722,  -98,
       -364, -106, -931, -247, -644, -271, -455,   83, -143, -758, -531,
       -344, -496, -854, -503, -220, -889, -624, -198, -908, -402, -904,
       -177, -781, -995, -225,  105, -245,   23, -628, -688, -255,  139,
       -261, -901, -575,   -5, -929,  188, -355,  -71,   31, -173, -818,
       -946, -619, -691, -826, -223, -259, -989,  -47, -130,  -47, -769,
       -576, -636, -746, -607, -920, -909, -697, -898, -835, -370, -425,
       -345, -965};
        int expResult = 9;
        int result = Lab5.getMinIndex(arr);
        assertEquals(expResult, result);
    }    
    
    @Test
    public void testMinIndexCornerCase() {
        double[] arr = {};
        int expResult = 0;
        int result = Lab5.getMinIndex(arr);
        assertEquals(expResult, result);
    }   
}
